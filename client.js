// Generated by CoffeeScript 1.9.2
var component, dom, exe, getfilename, getfilepath, hub, katex, kramed, odoql, parse, ql, ref, relay, renderrichtext, request, root, router, scene, store, widget;

ref = require('odojs'), component = ref.component, widget = ref.widget, hub = ref.hub, dom = ref.dom;

relay = require('odo-relay');

exe = require('odoql-exe');

odoql = require('odoql/odojs');

component.use(odoql);

parse = require('./parse');

store = require('odoql-store');

request = require('superagent');

getfilename = function() {
  var file;
  file = window.location.search;
  if (file.length > 1) {
    file = file.substr(1);
  }
  if (file === '') {
    file = 'index';
  }
  return file;
};

getfilepath = function() {
  var file;
  file = getfilename();
  if (file === 'index') {
    file = "README";
  } else {
    file = "glossary/" + file;
  }
  return "./" + file + ".md";
};

store = store().use('catalog', function(params, cb) {
  return request.get('./catalog.json').end(function(err, res) {
    if (err != null) {
      return cb(err);
    }
    if (!res.ok) {
      return cb(new Error(res.text));
    }
    return cb(null, res.body);
  });
}).use('content', function(params, cb) {
  return request.get(getfilepath()).end(function(err, res) {
    if (err != null) {
      return cb(err);
    }
    if (!res.ok) {
      return cb(new Error(res.text));
    }
    return cb(null, res.text);
  });
});

hub = hub();

exe = exe({
  hub: hub
}).use(store);

ql = require('odoql');

ql = ql.use('store');

katex = require('katex');

kramed = require('kramed');

renderrichtext = widget({
  render: function(state, params) {
    return dom('.definition');
  },
  afterMount: function(el, state, params) {
    var eq, equation, equations, i, j, len, len1, results, table, tables;
    el.innerHTML = kramed(params);
    equations = document.querySelectorAll('script[type^=math]');
    for (i = 0, len = equations.length; i < len; i++) {
      equation = equations[i];
      eq = document.createElement('span');
      equation.parentNode.insertBefore(eq, equation);
      katex.render(equation.innerHTML, eq);
      equation.parentNode.removeChild(equation);
    }
    tables = document.querySelectorAll('table:not(.table)');
    results = [];
    for (j = 0, len1 = tables.length; j < len1; j++) {
      table = tables[j];
      results.push(table.className += ' table');
    }
    return results;
  },
  onUpdate: function(el, state, params) {
    return el.innerHTML = kramed(params);
  }
});

router = component({
  query: function(params) {
    return {
      catalog: ql.store('catalog'),
      content: ql.store('content')
    };
  },
  render: function(state, params, hub) {
    var content;
    content = parse(state.content);
    return dom('#root.container', [
      dom('.secret', dom('a', {
        attributes: {
          href: "https://github.com/metocean/glossary/edit/gh-pages/" + (getfilepath())
        }
      }, ' ')), dom('h4', dom('a', {
        attributes: {
          href: './'
        }
      }, 'MetOcean Glossary')), dom('.row', [
        dom('.col-xs-3.toc', [
          dom('h6', 'Terms'), dom('.list-group', state.catalog.map(function(item) {
            var ref1;
            return dom("a.list-group-item" + (getfilename() === item.filename ? '.active' : ''), {
              attributes: {
                href: "?" + item.filename
              }
            }, (ref1 = item.title) != null ? ref1 : item.filename);
          }))
        ]), dom('.col-xs-9.content', [dom('h6', 'Definition'), renderrichtext(null, content.text)])
      ])
    ]);
  }
});

root = document.querySelector('#root');

scene = relay(root, router, exe, {
  hub: hub
});

scene.update();
